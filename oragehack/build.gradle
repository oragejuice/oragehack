buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://repo.spongepowered.org/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        //classpath "gradle.plugin.net.minecraftforge.gradle:ForgeGradle:2.0.2"
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

//apply plugin: "net.minecraftforge.gradle.tweaker-client"
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

group 'me.oragejuice.oragehack'
version '1.0'

sourceCompatibility = targetCompatibility = 1.8
compileJava {
    sourceCompatibility = targetCompatibility = 1.8
}

minecraft {
    //mappings channel: mappings_channel, version: mappings_version
    mappings channel: 'snapshot', version: '20180814-1.12'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }

    //makeObfSourceJar = true
}

tasks.withType(JavaCompile) {
    configure(options) {
        options.compilerArgs.add("-XDignore.symbol.file=true")
        options.fork = true
        options.forkOptions.executable = 'javac'
        options.encoding = 'utf-8'
    }
}

task('sourceJar', type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourceJar
}


repositories {
    mavenCentral()
    maven {
        url 'https://libraries.minecraft.net/'
    }

    maven { url = 'https://repo.spongepowered.org/maven' }
    mavenLocal()
}

configurations {
    shade
    implementation.extendsFrom shade
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'org.spongepowered.mixin', "${project.group}.relocated.mixin"
    finalizedBy 'reobfShadowJar'
}


mixin {
    defaultObfuscationEnv 'searge'

    add sourceSets.main, 'mixins.oragehack.refmap.json'
    config 'mixins.oragehack.json'

    debug.verbose = true
    debug.export = true
}

dependencies {

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly 'me.oragejuice:processor:1.0'
    annotationProcessor 'me.oragejuice:processor:1.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    shade ('net.minecraft:launchwrapper:1.12')
    shade ('me.oragejuice.eventbus:nukerbus:1.0')
    shade ('me.oragejuice.commandDispatcher:CommandDispatcher:unspecified')

    shade ('org.spongepowered:mixin:0.7.11-SNAPSHOT')
    {
        exclude module: 'log4j-core'
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }

}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
            "MixinConfigs": "mixins.oragehack.json"
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

}
jar.finalizedBy('reobfJar')
